ReactJS = it is a javascript library that is used to build user interfaces

it is based on javascript
library = it can only do 1 thing
1 thing  = to build user interfaces
user interfaces (ui) = (browser based) ui 

drone (remote control)
cctv (external input devices)
nairaland (browser)

framework = can do many things

facebook 
- pattern 
    * your code must be declarative = always use es6 and above syntax
    ( make it simple, don't complicate things, )  
    * component = section
    * learn once, write anywhere
        react = web application
              = mobile application ( android, ios )
              = desktop application (  )


1) how to create a new react project

npx create-react-app nameoftheapp

2) enter the folder

cd nameofthefolder

3) how to start react project

npm start

4) what is inside the project folder

node_modules ( all packages are stored )
    - don't touch it
    - don't delete it
public ( it contains static files)
    - files that will not change 
        * icons
        * images
        * font
        * css styles
src ( this is where you will write code )
    - you can open
    - you should open it
        * index.js
        * index.css
        * app.js
        * app.css
gitignore ( is used by git to house files you don't want to track )
README.md ( this is to describe your application)
    - who built it
    - how it was built
package.json 
    - this will keep inventory of your packages
    - it describes the package
    - keep the scripts that on the project
    - to configure your application
package-lock.json 
    - it is based on the package.json files
    - don't touch it


Twitter Interface 
    - app component ( containing all of them ) - 9
        * sidebar component ( should show the navigation ) - 1
        * searchbox compoent ( should allow us to search ) - 2
        * trend component - 3
        * message component -4 
        * profile component - 5
        * center card component - 6
        * header title - 7
        * interaction component - 8
            - chat component 
            - like component
            - share compoent
            - retweet compoent


Youtube Interface
    - container component   
        * sidebar component
            - overview component
            - personal video component
            - subscription component
            - more-from-youtube component
        * top component
            - navigation drawer component
            - searchbar component 
            - profile component
        * center component
            - video card component

Component ( breaking your interfaces into smaller section )
    - high level
    - low level ( technical idea )
    - code  ( html + css + js )

card = html + css + js

normal page  = html <-- css
                    <-- js

react = js ( html )
        <--- css

Technical / Code Explanation of Component
    - a component is javascript function
    - it must return ui (  something that the user must see ) 
    - it must return html

Component now becomes an html tag

What is component
    - technical definition of component 
        * it is a javascript function that returns UI ( html + css + js  )

Parent Component
    - calling/import
Child Component
    - called/imported

Behaviour of component ( Pure  )
    - a component should be a pure function
    - a componet should not have side effect
     * the component should not affect anyhing
     * anything should not affect it
    - the component should perform only 1 action


Data in Component
    - Properties ( props, p )
    - State

Properties ( const )
    Behaviour
    - the component and prop must behave like pure functions
    - is the link to tranfer data betweeen the parent and child component
    - this data flow in one direction ( from the parent to the child )
    - the child should not give data to the parent
    - the child must not change the data
        * the child should only use the data 

    Technically Definition
    - is an object
    - key value pair
    - which is the attributes passed into the component element

    How To Send Data From Child To Parent
    - we will send something from parent to child to extract the data
    - we will a function from parent to child to extract the data

2 ways to create component
    - old - class - classical component (  )
    - new - function - functional component

State   
    - can change
    - can not travel betweeen components
    - resides within the component
    - when the value of state changes the dom will re-render / reload
    - only the component will refresh

    How To Create A State
    - use need to import hooks - the useState hook

    const [intervalKey, setIntervalKey] = useState("");

    - useState
    - you must supply one parameter
    - will return an array
    - this array has 2 elements inside
    - the first-element is the argument that we passed to useState
    - the second-element is function that allows to change the argument
    - the benefit of the update function is it allow react to track the state and update the component according
   
    function useState(arg){
         function update(value){
            arg = value
        }
        // reload the component
        return [arg, update(0)]
    } 

    const col = useState("sdfdsfds")
    const [collect, setCollect] = useState("sdfdsfds")
    